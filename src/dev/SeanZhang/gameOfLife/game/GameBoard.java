/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dev.SeanZhang.gameOfLife.game;

import dev.SeanZhang.gameOfLife.gfx.Assets;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.Timer;

/**
 *
 * @author seanz
 */
public class GameBoard extends javax.swing.JPanel {
    boolean colorT=true;
    public final int DEFAULT_TICK_SPEED=25;
    public final int DEFAULT_WIDTH = 50;
    private Timer t1;
    GameEngine gme;
    Assets assets;
    int width;
    boolean isTicking;
    
    public void toggleC() {
        colorT=!colorT;
    }
    
    public void toggleTick() {
        isTicking = !isTicking;
    }
    
    public boolean returnTick() {
        return isTicking;
    }

    public GameEngine getGameEngine() {
        return gme;
    }

    public int getGWidth() {
        return width;
    }

    public void setGWidth(int width) {
        this.width = width;
        Assets.init(width,(this.getWidth()/width));
        gme.setBoardSize(width);
    }

    public void stopTimer() {
        t1.stop();
    }

    public void setTimer(int x) {
        if(x<0) {
            t1 = new Timer(DEFAULT_TICK_SPEED, new TimerListener());
        } else {
            t1 = new Timer(x, new TimerListener());
        }
        t1.start();
    }
    
    public void init() {
        this.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    gme.toggleValue(e.getX()/(getWidth()/width), e.getY()/(getWidth()/width));
                }

                @Override
                public void mouseReleased(MouseEvent e) {

                }
        });
    }
    
    public GameBoard() {
        width = DEFAULT_WIDTH;
        t1 = new Timer(DEFAULT_TICK_SPEED, new TimerListener());
        gme = new GameEngine(width);
        isTicking = false;
        t1.start();
        initComponents();
        setSize(600,600);
        init();
        System.out.println(this.getWidth());
        Assets.init(width,(this.getWidth()/width));
    }
    
    public void paintComponent(Graphics g) {
        for(int i=0;i<gme.getGameBoard().length;i++) {
            for(int j=0;j<gme.getGameBoard()[0].length;j++) {
                if(gme.getGameBoard()[i][j]==1) {
                    
                    if(colorT) {
                        g.drawImage(Assets.gradientTiles[i][j], j*(getWidth()/width), i*(getHeight()/width), (getHeight()/width), (getHeight()/width), this);
                    } else {
                        g.setColor(Color.white);
                        g.fillRect( j*(getWidth()/width), i*(getHeight()/width), (getHeight()/width), (getHeight()/width));
                    }
                } else {
                    if(colorT) {
                        g.setColor(Color.black);
                        g.fillRect( j*(getWidth()/width), i*(getHeight()/width), (getHeight()/width), (getHeight()/width));
                    } else {
                        g.drawImage(Assets.gradientTiles[i][j], j*(getWidth()/width), i*(getHeight()/width), (getHeight()/width), (getHeight()/width), this);
                    }
                }
            }
        }
        
        //updates gameBoard
        if(isTicking)
        gme.tickBoard();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private class TimerListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            //updates button
            repaint();
            
        } //end of action performed method
    } //end of TimerListener Class
}